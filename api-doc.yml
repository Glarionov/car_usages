openapi: 3.0.3
info:
  title: Example app for car usages
  description: |-
    This app imitates system with CRUD for adding users and autos to database and set data about car usages by users.
    At one moment, only one user can use one car. Trying to use one car with 2 users or one user with two cars will create an error.
  version: 1.0.11
servers:
  - url: https://carstore3.swagger.io/api/v3
tags:
  - name: car
    description: Operations with cars
  - name: user
    description: Operations with users
  - name: cars-usages
    description: Info about time periods of users using cars
paths:
  /cars:
    post:
      tags:
        - car
      summary: Add a new car
      operationId: addCar
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Car'
          application/xml:
            schema:
              $ref: '#/components/schemas/Car'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Car'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Car'
            application/xml:
              schema:
                $ref: '#/components/schemas/Car'
        '405':
          description: Invalid input
    get:
      tags:
        - car
      summary: Get list of cars
      description: Returns a single car
      operationId: getCarsById
      parameters:
        - name: page
          in: query
          description: ID of page to return
          required: false
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Car'
            application/xml:
              schema:
                $ref: '#/components/schemas/Car'
  /cars/{carId}:
    get:
      tags:
        - car
      summary: Find car by ID
      description: Returns a single car
      operationId: getCarById
      parameters:
        - name: carId
          in: path
          description: ID of car to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Car'
            application/xml:
              schema:
                $ref: '#/components/schemas/Car'
        '400':
          description: Invalid ID supplied
        '404':
          description: Car not found
    post:
      tags:
        - car
      summary: Updates a car in the store with form data
      description: ''
      operationId: updateCarWithForm
      parameters:
        - name: carId
          in: path
          description: ID of car that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
        - name: name
          in: query
          description: New name of a car
          schema:
            type: string
      responses:
        '405':
          description: Invalid input
    delete:
      tags:
        - car
      summary: Deletes a car
      description: delete a car
      operationId: deleteCar
      parameters:
        - name: carId
          in: path
          description: Car id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid car value
  /users:
    post:
      tags:
        - user
      summary: Add a new user
      operationId: addUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '405':
          description: Invalid input
    get:
      tags:
        - user
      summary: Get list of users
      operationId: getUsersById
      parameters:
        - name: page
          in: query
          description: ID of page to return
          required: false
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
  /users/{userId}:
    get:
      tags:
        - user
      summary: Find user by ID
      description: Returns a single user
      operationId: getUserById
      parameters:
        - name: userId
          in: path
          description: ID of user to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid ID supplied
        '404':
          description: User not found
    post:
      tags:
        - user
      summary: Updates a user in the store with form data
      description: ''
      operationId: updateUserWithForm
      parameters:
        - name: userId
          in: path
          description: ID of user that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
        - name: name
          in: query
          description: New user's name
          schema:
            type: string
        - name: email
          in: query
          description: New user's email
          schema:
            type: string
        - name: password
          in: query
          description: New user's password (you need to pass already converted version)
          schema:
            type: string
        - name: status
          in: query
          description: Status of user that needs to be updated
          schema:
            type: string
      responses:
        '405':
          description: Invalid input
    delete:
      tags:
        - user
      summary: Deletes a user
      description: delete a user
      operationId: deleteUser
      parameters:
        - name: userId
          in: path
          description: User id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid user value
  /cars-usages:
    post:
      tags:
        - cars-usages
      summary: Add info about car usage
      description: You can choose a time period when car is used. It starts with "start_using_at" and ends with "stop_using_at" parameters.
        If latter is null, it's car and user will be considered at use at any point in time after start.
        There can't be overlying in this periods, including two periods of a car/user without "stop_using_at" parameter
      operationId: addCarsUsages
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CarsUsages'
          application/xml:
            schema:
              $ref: '#/components/schemas/CarsUsages'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CarsUsages'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CarsUsages'
            application/xml:
              schema:
                $ref: '#/components/schemas/CarsUsages'
        '405':
          description: Invalid input
    get:
      tags:
        - cars-usages
      summary: Get list of cars-usages
      description: Returns a single car usage
      operationId: getCarsUsagesById
      parameters:
        - name: page
          in: query
          description: ID of page to return
          required: false
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CarsUsages'
            application/xml:
              schema:
                $ref: '#/components/schemas/CarsUsages'
  /cars-usages/{carsUsageId}:
    get:
      tags:
        - cars-usages
      summary: Find cars-usages by ID
      description: Returns a single car usage
      operationId: getCarsUsageById
      parameters:
        - name: carsUsageId
          in: path
          description: ID of cars-usages to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CarsUsages'
            application/xml:
              schema:
                $ref: '#/components/schemas/CarsUsages'
        '400':
          description: Invalid ID supplied
        '404':
          description: CarsUsages not found
    post:
      tags:
        - cars-usages
      summary: Updates a car usage in the store with form data
      description: ''
      operationId: updateCarsUsagesWithForm
      parameters:
        - name: carsUsageId
          in: path
          description: ID of cars-usages that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
        - name: carId
          in: query
          description: ID of a new car in usage pair
          schema:
            type: integer
            format: int64
        - name: userId
          in: query
          description: ID of a new user in usage pair
          schema:
            type: integer
            format: int64
        - name: start_using_at
          in: query
          description: Time point at which car starts being used
          schema:
            type: string
            format: date-time
        - name: stop_using_at
          in: query
          description: Time point at which car stops being used
          schema:
            type: string
            format: date-time
        - name: stop_using_now
          in: query
          description: Stops using car at current moment in time
          schema:
            type: boolean
      responses:
        '405':
          description: Invalid input
    delete:
      tags:
        - cars-usages
      summary: Deletes a car usage
      description: delete a car usage
      operationId: deleteCarsUsages
      parameters:
        - name: carsUsageId
          in: path
          description: CarsUsages id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid cars-usages value
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: theUser
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
      xml:
        name: user
    Car:
      required:
        - name
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: Ford x227x
      xml:
        name: car
    CarsUsages:
      properties:
        id:
          type: integer
          format: int64
          example: 10
        car_id:
          type: integer
          format: int64
          example: 10
        user_id:
          type: integer
          format: int64
          example: 10
        start_using_at:
          type: string
          format: date-time
        stop_using_at:
          type: string
          format: date-time
  requestBodies:
    Car:
      description: Car object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Car'
        application/xml:
          schema:
            $ref: '#/components/schemas/Car'
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
